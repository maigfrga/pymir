# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  #config.vm.box = "ubuntu/xenial64"
  #config.vm.box = "debian/stretch64"
  config.vm.box = "debian/jessie64"
  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder "../", "/project"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
   config.vm.provider "virtualbox" do |vb|
     # Display the VirtualBox GUI when booting the machine
     vb.gui = false
     # Customize the amount of memory on the VM:
     vb.memory = "8192"

     vb.cpus = 2
   end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   sudo apt-get update
  #   sudo apt-get install -y apache2
  # SHELL
  config.vm.provision "shell", inline: <<-SHELL
    sudo DEBIAN_FRONTEND=noninteractive apt-get -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" dist-upgrade
    apt-get update && sudo apt-get upgrade -y
    apt-get install git build-essential g++ python3 gcc libssl-dev python3-dev  python3-pip  libfreetype6-dev  python3-ipdb -y
     apt-get install pkg-config -y
     pip3 install --upgrade pip

    echo 'export MPLCONFIGDIR=/home/vagrant/.config/matplotlib/' >> /home/vagrant/.bashrc
    export MPLCONFIGDIR=/home/vagrant/.config/matplotlib/
    mkdir -p /home/vagrant/.config/matplotlib/
    chown vagrant:vagrant /home/vagrant/.config/
    chown vagrant:vagrant /home/vagrant/.config/matplotlib
    echo 'backend: Agg' > /home/vagrant/.config/matplotlib/matplotlibrc


    echo 'export MPLCONFIGDIR=/home/vagrant/.config/matplotlib/' >> /home/vagrant/.bashrc
    export MPLCONFIGDIR=/home/vagrant/.config/matplotlib/
    mkdir -p /home/vagrant/.config/matplotlib/
    chown vagrant:vagrant /home/vagrant/.config/
    chown vagrant:vagrant /home/vagrant/.config/matplotlib
    echo 'backend: Agg' > /home/vagrant/.config/matplotlib/matplotlibrc
    /project/code/scripts/install_seql.sh
    /project/code/scripts/install_sax_seql.sh
    python3 -m pip install numpy
    python3 -m pip install -r /project/code/requirements.txt

    fallocate -l 1G /mnt/1GB.swap
    dd if=/dev/zero of=/mnt/1GB.swap bs=1024 count=1048576
    mkswap /mnt/1GB.swap
    echo '/mnt/1GB.swap  none  swap  sw 0  0' >>  /etc/fstab 


  SHELL
end
